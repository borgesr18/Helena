// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prescription model matching user requirements
model Prescricao {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String   @db.Uuid
  clinica_id   String?  @db.Uuid
  paciente     String
  medicamento  String
  posologia    String
  observacoes  String   @default("")
  criado_em    DateTime @default(now()) @map("criado_em")
  
  // Relations
  clinica           Clinica? @relation(fields: [clinica_id], references: [id])
  assinaturas       AssinaturaDigital[]
  sbis_submissions  SBISSubmission[]
  entregas_medicamento EntregaMedicamento[]

  @@map("prescricoes")
}

// User profile model
model PerfilUsuario {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String   @unique @db.Uuid
  nome          String
  crm           String
  especialidade String?
  tipo          String   @default("médico")
  plano         String?
  ativo_licenca Boolean  @default(true)
  empresa_id    String?  @db.Uuid
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("perfis_usuarios")
}

// Patient model
model Paciente {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String    @db.Uuid
  clinica_id          String?   @db.Uuid  // Add clinic association
  nome                String
  cpf                 String?
  data_nascimento     DateTime?
  genero              String?
  alergias            String?   // Add allergies field
  medicamentos_atuais String?   // Add current medications
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  
  // Relations
  clinica             Clinica?  @relation(fields: [clinica_id], references: [id])
  consultas           Consulta[]
  
  @@map("pacientes")
}

// Prescription template model
model ModeloPrescricao {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  nome              String
  categoria         String?
  especialidade     String?
  medicamento       String
  posologia         String
  observacoes       String   @default("")
  ativo             Boolean  @default(true)
  uso_count         Int      @default(0)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("modelos_prescricao")
}

// User settings model
model ConfiguracaoUsuario {
  id                    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String  @unique @db.Uuid
  tema                  String  @default("claro")
  modelo_ia             String  @default("gpt-3.5-turbo")
  notificacoes_email    Boolean  @default(true)
  notificacoes_push     Boolean  @default(true)
  notificacoes_sms      Boolean  @default(false)
  notificacoes_consulta Boolean  @default(true)
  backup_automatico     Boolean  @default(true)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@map("configuracoes_usuario")
}

// Multi-tenant models for Phase 3
model Clinica {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome                  String
  cnpj                  String?  @unique
  endereco              String?
  telefone              String?
  email                 String?
  plano                 String   @default("helena_free") // helena_free, helena_basic, helena_premium
  ativo                 Boolean  @default(true)
  max_usuarios          Int      @default(1)
  max_pacientes         Int      @default(50)
  stripe_customer_id    String?  @unique
  stripe_subscription_id String? @unique
  status_pagamento      String   @default("ativo") // ativo, pendente, cancelado
  data_renovacao        DateTime?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relations
  usuarios              UsuarioClinica[]
  pacientes             Paciente[]
  prescricoes           Prescricao[]
  certificados          CertificadoDigital[]
  auditorias            AuditoriaCompliance[]
  voice_sessions        VoiceSession[]
  sbis_submissions      SBISSubmission[]
  consultas             Consulta[]
  entregas_medicamento  EntregaMedicamento[]
  
  @@map("clinicas")
}

model UsuarioClinica {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  clinica_id String   @db.Uuid
  role       String   @default("medico") // admin, medico, secretaria
  ativo      Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // Relations
  clinica    Clinica  @relation(fields: [clinica_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, clinica_id])
  @@map("usuarios_clinica")
}

// Drug interaction cache
model InteracaoMedicamento {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  medicamento1      String
  medicamento2      String
  severidade        String   // leve, moderada, grave
  descricao         String
  fonte             String   @default("rxnorm")
  created_at        DateTime @default(now())
  
  @@unique([medicamento1, medicamento2])
  @@map("interacoes_medicamentos")
}

// Phase 4 - Compliance models
model CertificadoDigital {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  clinica_id        String?  @db.Uuid
  tipo_certificado  String   // A1, A3, A4, S1, S3, S4
  numero_serie      String   @unique
  emissor           String   // Autoridade Certificadora
  valido_ate        DateTime
  status            String   @default("ativo") // ativo, revogado, expirado
  thumbprint        String   // Identificador único do certificado
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  clinica           Clinica? @relation(fields: [clinica_id], references: [id])
  assinaturas       AssinaturaDigital[]
  
  @@map("certificados_digitais")
}

model ValidacaoCFM {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  crm               String
  uf                String
  nome_medico       String
  especialidade     String?
  situacao          String   // ativo, inativo, suspenso
  data_inscricao    DateTime?
  data_validacao    DateTime @default(now())
  valido_ate        DateTime
  fonte             String   @default("cfm_webservice")
  created_at        DateTime @default(now())
  
  @@unique([crm, uf])
  @@map("validacoes_cfm")
}

model AssinaturaDigital {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prescricao_id         String   @db.Uuid
  certificado_id        String   @db.Uuid
  user_id               String   @db.Uuid
  hash_documento        String   // Hash SHA-256 do documento
  assinatura_digital    String   // Assinatura criptográfica
  timestamp_assinatura  DateTime @default(now())
  ip_origem             String?
  user_agent            String?
  status                String   @default("valida") // valida, invalida, revogada
  
  // Relations
  prescricao            Prescricao @relation(fields: [prescricao_id], references: [id], onDelete: Cascade)
  certificado           CertificadoDigital @relation(fields: [certificado_id], references: [id])
  
  @@map("assinaturas_digitais")
}

model AuditoriaCompliance {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  clinica_id        String?  @db.Uuid
  tipo_evento       String   // assinatura, validacao_cfm, emissao_prescricao, transcricao_voz, pagamento
  descricao         String
  dados_evento      Json?    // Dados específicos do evento
  ip_origem         String?
  user_agent        String?
  timestamp         DateTime @default(now())
  
  // Relations
  clinica           Clinica? @relation(fields: [clinica_id], references: [id])
  
  @@map("auditoria_compliance")
}

// Phase 5 - Advanced Integrations models
model VoiceSession {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  clinica_id        String?  @db.Uuid
  session_start     DateTime @default(now())
  session_end       DateTime?
  total_duration    Int?     // em segundos
  commands_detected Int      @default(0)
  transcriptions    Json?    // Array de transcrições
  wake_words        Json?    // Array de wake words detectadas
  created_at        DateTime @default(now())
  
  // Relations
  clinica           Clinica? @relation(fields: [clinica_id], references: [id])
  
  @@map("voice_sessions")
}

model SBISSubmission {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prescricao_id     String   @db.Uuid
  user_id           String   @db.Uuid
  clinica_id        String?  @db.Uuid
  sbis_id           String?  // ID retornado pelo SBIS/RNDS
  status            String   @default("pendente") // pendente, enviado, aprovado, rejeitado
  fhir_bundle       Json?    // Bundle FHIR R4 enviado
  response_data     Json?    // Resposta do SBIS
  error_message     String?
  submitted_at      DateTime @default(now())
  
  // Relations
  prescricao        Prescricao @relation(fields: [prescricao_id], references: [id])
  clinica           Clinica?   @relation(fields: [clinica_id], references: [id])
  
  @@map("sbis_submissions")
}

// Phase 7 - Telemedicine models
model Consulta {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String   @db.Uuid
  clinica_id            String?  @db.Uuid
  paciente_id           String   @db.Uuid
  tipo                  String   // presencial, video, telefone
  status                String   @default("agendada") // agendada, em_andamento, concluida, cancelada
  data_agendamento      DateTime
  duracao_minutos       Int      @default(30)
  link_video            String?  // WebRTC room ID
  gravacao_url          String?  // Supabase Storage URL
  observacoes           String?
  receita_gerada        Boolean  @default(false)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relations
  clinica               Clinica? @relation(fields: [clinica_id], references: [id])
  paciente              Paciente @relation(fields: [paciente_id], references: [id])
  notificacoes          NotificacaoConsulta[]
  sessoes_video         SessaoVideo[]
  
  @@map("consultas")
}

model NotificacaoConsulta {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  consulta_id           String   @db.Uuid
  user_id               String   @db.Uuid
  tipo                  String   // lembrete, confirmacao, cancelamento
  canal                 String   // email, sms, push, in_app
  conteudo              String
  enviado_em            DateTime?
  status                String   @default("pendente") // pendente, enviado, falhou
  agendado_para         DateTime
  created_at            DateTime @default(now())
  
  // Relations
  consulta              Consulta @relation(fields: [consulta_id], references: [id], onDelete: Cascade)
  
  @@map("notificacoes_consulta")
}

model EntregaMedicamento {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prescricao_id         String   @db.Uuid
  user_id               String   @db.Uuid
  clinica_id            String?  @db.Uuid
  farmacia_parceira     String   // Nome da farmácia
  status                String   @default("pendente") // pendente, confirmado, preparando, enviado, entregue, cancelado
  endereco_entrega      Json     // Endereço completo
  valor_total           Decimal? @db.Decimal(10,2)
  codigo_rastreamento   String?
  data_estimada         DateTime?
  data_entrega          DateTime?
  observacoes           String?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relations
  prescricao            Prescricao @relation(fields: [prescricao_id], references: [id])
  clinica               Clinica?   @relation(fields: [clinica_id], references: [id])
  
  @@map("entregas_medicamento")
}

model SessaoVideo {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  consulta_id           String   @db.Uuid
  room_id               String   @unique
  medico_peer_id        String?
  paciente_peer_id      String?
  status                String   @default("aguardando") // aguardando, ativa, finalizada
  iniciada_em           DateTime?
  finalizada_em         DateTime?
  duracao_segundos      Int?
  qualidade_conexao     Json?    // Métricas de qualidade
  gravacao_habilitada   Boolean  @default(false)
  created_at            DateTime @default(now())
  
  // Relations
  consulta              Consulta @relation(fields: [consulta_id], references: [id], onDelete: Cascade)
  
  @@map("sessoes_video")
}
